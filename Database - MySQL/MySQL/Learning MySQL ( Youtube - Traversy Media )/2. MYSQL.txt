ORDER BY clause:

SELECT * FROM users ORDER BY last_name ASC;
SELECT * FROM users ORDER BY last_name DESC;


CONCAT() :

if we want to concat two columns and want to show them
in a different name :

SELECT CONCAT(first_name, ' ', last_name) AS 'Full_name' FROM users;



DISTINCT :

To eliminate the repeated value and show only one.

SELECT DISTINCT location FROM users;



WHERE - BETWEEN :

SELECT * FROM users WHERE age BETWEEN 20 AND 25;
-> 20-25 aged users



LIKE clause :


SELECT * FROM users WHERE department LIKE 'd%';

-> LIKE 'd%' - will show the departments starts with d.....



SELECT * FROM users WHERE department LIKE '%t';

-> LIKE '%t' - will show the departments ends with t.....


SELECT * FROM users WHERE department LIKE '%es%';

-> LIKE '%es%' - will show the departments with 'es' somewhere in the middle.....


SELECT * FROM users WHERE department NOT LIKE '%t';



IN clause:

SELECT * FROM users WHERE department IN('design', 'sales');

-> this will show all users from design and sales department



Custom index for other columns:

CREATE INDEX LIndex ON users(location);

-> make an index for location column

For Dropping: DROP INDEX LIndex ON users;



New Table With FOREIGN KEY:

CREATE TABLE posts(
id INT AUTO_INCREMENT,
   user_id INT,
   title VARCHAR(100),
   body TEXT,
   publish_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY(id),
   FOREIGN KEY (user_id) REFERENCES users(id)
);

INSERT INTO posts(user_id, title, body) 
VALUES (1, 'Post One', 'This is post one'),
(3, 'Post Two', 'This is post two'),
(1, 'Post Three', 'This is post three'),
(2, 'Post Four', 'This is post four'),
(5, 'Post Five', 'This is post five'),
(4, 'Post Six', 'This is post six'),
(2, 'Post Seven', 'This is post seven'),
(1, 'Post Eight', 'This is post eight'),
(3, 'Post Nine', 'This is post nine'),
(4, 'Post Ten', 'This is post ten');


INNER JOIN :

joining 2 TABLES:

SELECT
  users.first_name,
  users.last_name,
  posts.title,
  posts.publish_date
FROM users
INNER JOIN posts
ON users.id = posts.user_id
ORDER BY posts.title;



2 Foreign Keys:

CREATE TABLE comments(
	id INT AUTO_INCREMENT,
    post_id INT,
    user_id INT,
    body TEXT,
    publish_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    FOREIGN KEY(user_id) references users(id),
    FOREIGN KEY(post_id) references posts(id)
);


INSERT INTO comments(post_id, user_id, body) 
VALUES (1, 3, 'This is comment one'),
(2, 1, 'This is comment two'),
(5, 3, 'This is comment three'),
(2, 4, 'This is comment four'),
(1, 2, 'This is comment five'),
(3, 1, 'This is comment six'),
(3, 2, 'This is comment six'),
(5, 4, 'This is comment seven'),
(2, 3, 'This is comment seven');


LEFT JOIN :

SELECT
comments.body,
posts.title
FROM comments
LEFT JOIN posts ON posts.id = comments.post_id
ORDER BY posts.title;


Multiple INNER JOIN :

SELECT
comments.body,
posts.title,
users.first_name,
users.last_name
FROM comments
INNER JOIN posts on posts.id = comments.post_id
INNER JOIN users on users.id = comments.user_id
ORDER BY posts.title;




SELECT COUNT(id) FROM comments;
SELECT MAX(age) FROM users;
SELECT SUM(age) FROM users;

SELECT UCASE(first_name), LCASE(last_name) FROM users;

SELECT age, COUNT(age) FROM users GROUP BY age;
SELECT age, COUNT(age) FROM users WHERE age > 20 GROUP BY age;
SELECT age, COUNT(age) FROM users GROUP BY age HAVING count(age) >=2;